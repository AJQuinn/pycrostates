
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials\plot_Single_subject.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_plot_Single_subject.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_Single_subject.py:


Single Subject Segmentation
===========================

This example demonstrates how to segment a single subject recording into microstates sequence.

.. GENERATED FROM PYTHON SOURCE LINES 7-31

.. code-block:: default


    from mne.io import concatenate_raws, read_raw_edf
    from mne.datasets import eegbci
    from mne.channels import make_standard_montage
    import pandas as pd

    import pycrostates
    from pycrostates.clustering import ModKMeans
    from pycrostates.metrics import compute_metrics

    subject = 1
    runs = [1,2,3]  # motor imagery: hands vs feet

    raw_fnames = eegbci.load_data(subject, runs, update_path=True)
    raw_files = [read_raw_edf(f, preload=True) for f in raw_fnames]
    raw = concatenate_raws(raw_files)
    eegbci.standardize(raw)  # set channel names

    raw.rename_channels(lambda x: x.strip('.'))
    montage = make_standard_montage('standard_1005')
    raw.set_montage(montage)

    raw.pick('eeg')
    raw.set_eeg_reference('average')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    d:\python\lib\importlib\_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject
      return f(*args, **kwds)
    Downloading https://physionet.org/files/eegmmidb/1.0.0/S001/S001R01.edf (1.2 MB)
      0%|                                                                                                                                                                       | Downloading : 0.00/1.22M [00:00<?,        ?B/s]     20%|################################4                                                                                                                                  | Downloading : 248k/1.22M [00:00<00:01,     962kB/s]     25%|########################################8                                                                                                                          | Downloading : 312k/1.22M [00:00<00:01,     923kB/s]     48%|##############################################################################4                                                                                    | Downloading : 600k/1.22M [00:00<00:00,     951kB/s]     69%|###############################################################################################################9                                                   | Downloading : 856k/1.22M [00:00<00:00,     995kB/s]     89%|################################################################################################################################################5                 | Downloading : 1.09M/1.22M [00:00<00:00,    1.03MB/s]    100%|##################################################################################################################################################################| Downloading : 1.22M/1.22M [00:00<00:00,    1.88MB/s]
    Downloading https://physionet.org/files/eegmmidb/1.0.0/S001/S001R02.edf (1.2 MB)
      0%|                                                                                                                                                                       | Downloading : 0.00/1.22M [00:00<?,        ?B/s]      4%|#######2                                                                                                                                                          | Downloading : 56.0k/1.22M [00:00<00:02,     459kB/s]      8%|#############6                                                                                                                                                     | Downloading : 104k/1.22M [00:00<00:02,     456kB/s]     17%|############################2                                                                                                                                      | Downloading : 216k/1.22M [00:00<00:02,     455kB/s]     25%|########################################8                                                                                                                          | Downloading : 312k/1.22M [00:00<00:02,     477kB/s]     40%|#################################################################9                                                                                                 | Downloading : 504k/1.22M [00:00<00:01,     484kB/s]    100%|##################################################################################################################################################################| Downloading : 1.22M/1.22M [00:00<00:00,     507kB/s]    100%|##################################################################################################################################################################| Downloading : 1.22M/1.22M [00:00<00:00,    1.33MB/s]
    Downloading https://physionet.org/files/eegmmidb/1.0.0/S001/S001R03.edf (2.5 MB)
      0%|                                                                                                                                                                       | Downloading : 0.00/2.48M [00:00<?,        ?B/s]      2%|###5                                                                                                                                                              | Downloading : 56.0k/2.48M [00:00<00:05,     459kB/s]      4%|######6                                                                                                                                                            | Downloading : 104k/2.48M [00:00<00:05,     454kB/s]      9%|#############8                                                                                                                                                     | Downloading : 216k/2.48M [00:00<00:05,     466kB/s]     14%|######################1                                                                                                                                            | Downloading : 344k/2.48M [00:00<00:04,     477kB/s]     20%|################################3                                                                                                                                  | Downloading : 504k/2.48M [00:00<00:04,     489kB/s]     29%|##############################################7                                                                                                                    | Downloading : 728k/2.48M [00:00<00:03,     509kB/s]     36%|###########################################################1                                                                                                       | Downloading : 920k/2.48M [00:00<00:03,     534kB/s]     51%|###################################################################################2                                                                              | Downloading : 1.27M/2.48M [00:00<00:02,     561kB/s]     62%|###################################################################################################6                                                              | Downloading : 1.52M/2.48M [00:00<00:01,     583kB/s]     67%|###########################################################################################################8                                                      | Downloading : 1.65M/2.48M [00:01<00:01,     601kB/s]     72%|####################################################################################################################                                              | Downloading : 1.77M/2.48M [00:01<00:01,     628kB/s]     77%|############################################################################################################################1                                     | Downloading : 1.90M/2.48M [00:01<00:00,     639kB/s]     94%|########################################################################################################################################################7         | Downloading : 2.34M/2.48M [00:01<00:00,     667kB/s]     99%|################################################################################################################################################################9 | Downloading : 2.46M/2.48M [00:01<00:00,     687kB/s]    100%|##################################################################################################################################################################| Downloading : 2.48M/2.48M [00:01<00:00,    1.80MB/s]
    Extracting EDF parameters from C:\Users\Victor\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R01.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    Extracting EDF parameters from C:\Users\Victor\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R02.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    Extracting EDF parameters from C:\Users\Victor\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R03.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 19999  =      0.000 ...   124.994 secs...
    EEG channel type selected for re-referencing
    Applying average reference.
    Applying a custom EEG reference.

    <RawEDF | S001R01.edf, 64 x 39520 (247.0 s), ~19.4 MB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 32-34

Fit the modified Kmeans algorithm with the raw data. Here we use ``gfp=True`` to extract gfp peaks on fly.
Note that, depending on your setup, you can change ``n_jobs=1`` in order to use parallel processing and speed up the process.

.. GENERATED FROM PYTHON SOURCE LINES 34-39

.. code-block:: default


    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters)
    ModK.fit(raw, gfp=True, n_jobs=5)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|                                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]      5%|########9                                                                                                                                                                          |  : 5/100 [00:03<01:03,    1.49it/s]     10%|#################8                                                                                                                                                                |  : 10/100 [00:04<00:58,    1.53it/s]     15%|##########################7                                                                                                                                                       |  : 15/100 [00:06<00:53,    1.58it/s]     20%|###################################6                                                                                                                                              |  : 20/100 [00:08<00:49,    1.61it/s]     25%|############################################5                                                                                                                                     |  : 25/100 [00:08<00:44,    1.67it/s]     30%|#####################################################4                                                                                                                            |  : 30/100 [00:09<00:40,    1.74it/s]     35%|##############################################################3                                                                                                                   |  : 35/100 [00:11<00:36,    1.77it/s]     40%|#######################################################################2                                                                                                          |  : 40/100 [00:12<00:32,    1.83it/s]     45%|################################################################################1                                                                                                 |  : 45/100 [00:13<00:29,    1.88it/s]     50%|#########################################################################################                                                                                         |  : 50/100 [00:14<00:25,    1.95it/s]     55%|#################################################################################################9                                                                                |  : 55/100 [00:15<00:22,    2.00it/s]     60%|##########################################################################################################8                                                                       |  : 60/100 [00:16<00:19,    2.05it/s]     65%|###################################################################################################################7                                                              |  : 65/100 [00:18<00:16,    2.09it/s]     70%|############################################################################################################################6                                                     |  : 70/100 [00:19<00:13,    2.14it/s]     75%|#####################################################################################################################################5                                            |  : 75/100 [00:20<00:11,    2.21it/s]     80%|##############################################################################################################################################4                                   |  : 80/100 [00:22<00:08,    2.25it/s]     85%|#######################################################################################################################################################2                          |  : 85/100 [00:23<00:06,    2.31it/s]     90%|################################################################################################################################################################2                 |  : 90/100 [00:25<00:04,    2.31it/s]     95%|#########################################################################################################################################################################1        |  : 95/100 [00:26<00:02,    2.34it/s]    100%|#################################################################################################################################################################################|  : 100/100 [00:28<00:00,    2.39it/s]    100%|#################################################################################################################################################################################|  : 100/100 [00:28<00:00,    3.55it/s]

    ()



.. GENERATED FROM PYTHON SOURCE LINES 40-43

Now that our algorithm is fitted, we can visualise the cluster centers, also called Microstate maps or Microstate topographies
using :meth:`ModK.plot_cluster_centers`. Note than this method uses the :class:`~mne.Info` object of the fitted instance to display
the topographies.

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: default

    ModK.plot_cluster_centers()




.. image:: /auto_tutorials/images/sphx_glr_plot_Single_subject_001.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x00000259E99BF588>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x00000259EB1F5908>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x00000259EB22CA20>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x00000259EB261B38>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 46-47

Predict.

.. GENERATED FROM PYTHON SOURCE LINES 47-50

.. code-block:: default

    segmentation = ModK.predict(raw, half_window_size=5, factor=10)
    pycrostates.viz.plot_segmentation(segmentation, raw)




.. image:: /auto_tutorials/images/sphx_glr_plot_Single_subject_002.png
    :alt: Segmentation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 1000x400 with 2 Axes>, [<matplotlib.lines.Line2D object at 0x00000259EB50E5F8>])



.. GENERATED FROM PYTHON SOURCE LINES 51-52

Compute microstate parameters and convert results into a :class:`~pandas.DataFrame`.

.. GENERATED FROM PYTHON SOURCE LINES 52-54

.. code-block:: default

    metrics = compute_metrics(raw, ModK, norm_gfp=True,  half_window_size=5, factor=10)
    df = pd.DataFrame([metrics])
    print(df)



.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

                                                       0
    0  {'1_dist_corr': [0.6890845559846752, 0.6976801...





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  37.632 seconds)


.. _sphx_glr_download_auto_tutorials_plot_Single_subject.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_Single_subject.py <plot_Single_subject.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_Single_subject.ipynb <plot_Single_subject.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
