
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials\plot_Single_subject.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_plot_Single_subject.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_Single_subject.py:


Single Subject Segmentation
===========================

This example demonstrates how to segment a single subject recording into microstates sequence.

.. GENERATED FROM PYTHON SOURCE LINES 7-33

.. code-block:: default


    import os.path as op
    import mne
    from mne.io import concatenate_raws, read_raw_edf
    from mne.datasets import eegbci
    from mne.channels import make_standard_montage
    import pandas as pd

    import pycrostates
    from pycrostates.clustering import ModKMeans
    from pycrostates.metrics import compute_metrics

    subject = 1
    runs = [1,2,3]  # motor imagery: hands vs feet

    raw_fnames = eegbci.load_data(subject, runs, update_path=True)
    raw_files = [read_raw_edf(f, preload=True) for f in raw_fnames]
    raw = concatenate_raws(raw_files)
    eegbci.standardize(raw)  # set channel names

    raw.rename_channels(lambda x: x.strip('.'))
    montage = make_standard_montage('standard_1005')
    raw.set_montage(montage)

    raw.pick('eeg')
    raw.set_eeg_reference('average')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    c:\users\ferat\appdata\local\continuum\miniconda3\envs\sci37\lib\importlib\_bootstrap.py:219: RuntimeWarning: numpy.ufunc size changed, may indicate binary incompatibility. Expected 192 from C header, got 216 from PyObject
      return f(*args, **kwds)
    Extracting EDF parameters from C:\Users\ferat\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R01.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    Extracting EDF parameters from C:\Users\ferat\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R02.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    Extracting EDF parameters from C:\Users\ferat\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R03.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 19999  =      0.000 ...   124.994 secs...
    EEG channel type selected for re-referencing
    Applying average reference.
    Applying a custom EEG reference.

    <RawEDF | S001R01.edf, 64 x 39520 (247.0 s), ~19.4 MB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 34-36

Fit the modified Kmeans algorithm with the raw data. Here we use ``gfp=True`` to extract gfp peaks on fly.
Note that, depending on your setup, you can change ``n_jobs=1`` in order to use parallel processing and speed up the process.

.. GENERATED FROM PYTHON SOURCE LINES 36-41

.. code-block:: default


    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters)
    ModK.fit(raw, gfp=True, n_jobs=5)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|                                                                                                                                                                                    |  : 0/100 [00:00<?,       ?it/s]      5%|########8                                                                                                                                                                       |  : 5/100 [00:03<01:11,    1.34it/s]     10%|#################5                                                                                                                                                             |  : 10/100 [00:04<01:04,    1.39it/s]     15%|##########################2                                                                                                                                                    |  : 15/100 [00:05<00:58,    1.45it/s]     20%|###################################                                                                                                                                            |  : 20/100 [00:05<00:52,    1.52it/s]     25%|###########################################7                                                                                                                                   |  : 25/100 [00:06<00:47,    1.57it/s]     30%|####################################################5                                                                                                                          |  : 30/100 [00:07<00:42,    1.64it/s]     35%|#############################################################2                                                                                                                 |  : 35/100 [00:07<00:38,    1.70it/s]     40%|######################################################################                                                                                                         |  : 40/100 [00:08<00:33,    1.77it/s]     45%|##############################################################################7                                                                                                |  : 45/100 [00:09<00:29,    1.84it/s]     50%|#######################################################################################5                                                                                       |  : 50/100 [00:09<00:26,    1.91it/s]     55%|################################################################################################2                                                                              |  : 55/100 [00:10<00:22,    1.99it/s]     60%|#########################################################################################################                                                                      |  : 60/100 [00:11<00:19,    2.05it/s]     65%|#################################################################################################################7                                                             |  : 65/100 [00:12<00:16,    2.12it/s]     70%|##########################################################################################################################4                                                    |  : 70/100 [00:13<00:13,    2.20it/s]     75%|###################################################################################################################################2                                           |  : 75/100 [00:13<00:10,    2.28it/s]     80%|############################################################################################################################################                                   |  : 80/100 [00:14<00:08,    2.36it/s]     85%|####################################################################################################################################################7                          |  : 85/100 [00:15<00:06,    2.43it/s]     90%|#############################################################################################################################################################5                 |  : 90/100 [00:15<00:03,    2.52it/s]     95%|######################################################################################################################################################################2        |  : 95/100 [00:16<00:01,    2.60it/s]    100%|##############################################################################################################################################################################|  : 100/100 [00:17<00:00,    2.69it/s]    100%|##############################################################################################################################################################################|  : 100/100 [00:17<00:00,    5.78it/s]

    ()



.. GENERATED FROM PYTHON SOURCE LINES 42-45

Now that our algorithm is fitted, we can visualise the cluster centers, also called Microstate maps or Microstate topographies
using :meth:`ModK.plot_cluster_centers`. Note than this method uses the :class:`~mne.Info` object of the fitted instance to display
the topographies.

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: default

    ModK.plot_cluster_centers()




.. image:: /auto_tutorials/images/sphx_glr_plot_Single_subject_001.png
    :alt: plot Single subject
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x000001F9C0B0A1C8>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001F9BEC54188>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001F9BEC8BE08>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001F9BECC3AC8>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 48-49

Predict.

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default

    segmentation = ModK.predict(raw, half_window_size=5, factor=10)
    pycrostates.viz.plot_segmentation(segmentation, raw)




.. image:: /auto_tutorials/images/sphx_glr_plot_Single_subject_002.png
    :alt: Segmentation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 1000x400 with 2 Axes>, [<matplotlib.lines.Line2D object at 0x000001F9BEF8CE88>])



.. GENERATED FROM PYTHON SOURCE LINES 53-54

Compute microstate parameters and convert results into a :class:`~pandas.DataFrame`.

.. GENERATED FROM PYTHON SOURCE LINES 54-56

.. code-block:: default

    metrics = compute_metrics(segmentation, ModK.cluster_centers, raw, norm_gfp=True)
    df = pd.DataFrame([metrics])
    df




.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>state_1_dist_corr</th>
          <th>state_1_mean_corr</th>
          <th>state_1_dist_gev</th>
          <th>state_1_gev</th>
          <th>state_1_timecov</th>
          <th>state_1_dist_durs</th>
          <th>state_1_meandurs</th>
          <th>state_1_occurences</th>
          <th>state_2_dist_corr</th>
          <th>state_2_mean_corr</th>
          <th>state_2_dist_gev</th>
          <th>state_2_gev</th>
          <th>state_2_timecov</th>
          <th>state_2_dist_durs</th>
          <th>state_2_meandurs</th>
          <th>state_2_occurences</th>
          <th>state_3_dist_corr</th>
          <th>state_3_mean_corr</th>
          <th>state_3_dist_gev</th>
          <th>state_3_gev</th>
          <th>state_3_timecov</th>
          <th>state_3_dist_durs</th>
          <th>state_3_meandurs</th>
          <th>state_3_occurences</th>
          <th>state_4_dist_corr</th>
          <th>state_4_mean_corr</th>
          <th>state_4_dist_gev</th>
          <th>state_4_gev</th>
          <th>state_4_timecov</th>
          <th>state_4_dist_durs</th>
          <th>state_4_meandurs</th>
          <th>state_4_occurences</th>
          <th>unlabeled_timecov</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>[0.5039996517599461, 0.4744242778149985, 0.560...</td>
          <td>0.761786</td>
          <td>[1.369243898170386e-06, 7.569981936420706e-07,...</td>
          <td>0.226191</td>
          <td>0.1443</td>
          <td>[0.06875, 0.08125, 0.2125, 0.18125, 0.625, 0.3...</td>
          <td>0.125556</td>
          <td>0.143955</td>
          <td>[0.6890845551879123, 0.6976801568578832, 0.562...</td>
          <td>0.609633</td>
          <td>[6.7136687320875335e-06, 4.647807104289774e-06...</td>
          <td>0.103286</td>
          <td>0.225511</td>
          <td>[0.075, 0.0375, 0.0625, 0.05625, 0.08125, 0.04...</td>
          <td>0.117815</td>
          <td>0.239754</td>
          <td>[-0.15892452084458278, -0.13089100794603903, -...</td>
          <td>0.574488</td>
          <td>[2.056993330720726e-07, 1.5860738717623078e-07...</td>
          <td>0.109297</td>
          <td>0.281544</td>
          <td>[0.0875, 0.24375, 0.09375, 0.08125, 0.13125, 0...</td>
          <td>0.119717</td>
          <td>0.29457</td>
          <td>[0.3153965535553327, 0.21740241671246188, 0.12...</td>
          <td>0.556627</td>
          <td>[8.372415075174573e-07, 3.5503436170370445e-07...</td>
          <td>0.166547</td>
          <td>0.348645</td>
          <td>[0.3, 0.04375, 0.10625, 0.1125, 0.06875, 0.15,...</td>
          <td>0.135738</td>
          <td>0.321721</td>
          <td>0.010225</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  19.854 seconds)


.. _sphx_glr_download_auto_tutorials_plot_Single_subject.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_Single_subject.py <plot_Single_subject.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_Single_subject.ipynb <plot_Single_subject.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
