
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials\clustering\plot_find_best_number_of_clusters.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_clustering_plot_find_best_number_of_clusters.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_clustering_plot_find_best_number_of_clusters.py:


Clustering performance evaluation
=================================

This example shows how to evaluate the quality of the clustering and gives an indication of how many clusters to choose.
This step can be done at different stages of the analysis, at the subject or group level for example.
Pycrostates implements different scores to evaluate the quality of clustering, we will see how to use them.

.. GENERATED FROM PYTHON SOURCE LINES 9-28

.. code-block:: default


    from mne.io import read_raw_edf
    from mne.datasets import eegbci
    from mne.channels import make_standard_montage
    from pycrostates.clustering import ModKMeans

    subject = 1
    runs = [1]

    raw_fnames = eegbci.load_data(subject, runs, update_path=True)[0]
    raw = read_raw_edf(raw_fnames, preload=True)
    eegbci.standardize(raw)  # set channel names

    raw.rename_channels(lambda x: x.strip('.'))
    montage = make_standard_montage('standard_1005')
    raw.set_montage(montage)

    raw.pick('eeg')
    raw.set_eeg_reference('average')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Extracting EDF parameters from C:\Users\ferat\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R01.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    EEG channel type selected for re-referencing
    Applying average reference.
    Applying a custom EEG reference.


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">


    <table class="table table-hover">
        <tr>
            <th>Measurement date</th>
            <td>August 12, 2009  16:15:00 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
    <td>Unknown</td>
        </tr>
            <th>Participant</th>
    <td>Unknown</td>
        </tr>
        <tr>
            <th>Digitized points</th>
            <td>67 points</td>
        </tr>
        <tr>
            <th>Good channels</th>
            <td>0 magnetometer, 0 gradiometer,
                and 64 EEG channels</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td></td>
        
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>Not available</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
        <tr>
            <th>Sampling frequency</th>
            <td>160.00 Hz</td>
        </tr>
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
         <tr>
            <th>Lowpass</th>
            <td>80.00 Hz</td>
        </tr>

        <tr>
            <th>Filenames</th>
            <td>S001R01.edf</td>
        </tr>
        <tr>
            <th>Duration</th>
            <td>00:01:00 (HH:MM:SS)</td>
        </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 29-30

We must first fit our clustering algorithm (in our case the modified Kmeans) with some data.

.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: default

    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters, random_state=42)
    ModK.fit(raw, n_jobs=5, min_peak_distance=0)
    ModK.plot()



.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_find_best_number_of_clusters_001.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]      5%|########1                                                                                                                                                          |  : 5/100 [00:03<01:05,    1.46it/s]     10%|################2                                                                                                                                                 |  : 10/100 [00:04<00:59,    1.52it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:04<00:53,    1.58it/s]     20%|################################4                                                                                                                                 |  : 20/100 [00:05<00:48,    1.64it/s]     25%|########################################5                                                                                                                         |  : 25/100 [00:06<00:43,    1.71it/s]     30%|################################################6                                                                                                                 |  : 30/100 [00:06<00:39,    1.78it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:07<00:35,    1.86it/s]     40%|################################################################8                                                                                                 |  : 40/100 [00:08<00:31,    1.92it/s]     45%|########################################################################9                                                                                         |  : 45/100 [00:08<00:27,    2.00it/s]     50%|#################################################################################                                                                                 |  : 50/100 [00:09<00:24,    2.07it/s]     55%|#########################################################################################1                                                                        |  : 55/100 [00:10<00:21,    2.13it/s]     60%|#################################################################################################2                                                                |  : 60/100 [00:11<00:18,    2.22it/s]     65%|#########################################################################################################3                                                        |  : 65/100 [00:11<00:15,    2.29it/s]     70%|#################################################################################################################4                                                |  : 70/100 [00:13<00:12,    2.35it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:13<00:10,    2.44it/s]     80%|#################################################################################################################################6                                |  : 80/100 [00:14<00:07,    2.51it/s]     85%|#########################################################################################################################################7                        |  : 85/100 [00:14<00:05,    2.61it/s]     90%|#################################################################################################################################################8                |  : 90/100 [00:15<00:03,    2.70it/s]     95%|#########################################################################################################################################################9        |  : 95/100 [00:16<00:01,    2.78it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:17<00:00,    2.87it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:17<00:00,    5.84it/s]
    Selecting run with highest GEV = 0.6816047968052895%.

    (<Figure size 640x480 with 4 Axes>, array([<AxesSubplot:title={'center':'1'}>,
           <AxesSubplot:title={'center':'2'}>,
           <AxesSubplot:title={'center':'3'}>,
           <AxesSubplot:title={'center':'4'}>], dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 35-36

We can then compute several clustering performance score on the fitted instance.

.. GENERATED FROM PYTHON SOURCE LINES 36-46

.. code-block:: default

    from pycrostates.metrics import silhouette, davies_bouldin, calinski_harabasz, dunn

    silhouette_score = silhouette(ModK)
    print('silhouette score: ', silhouette_score)
    davies_bouldin_score = davies_bouldin(ModK)
    print('davies-bouldin score: ', davies_bouldin_score)
    calinski_harabasz_score = calinski_harabasz(ModK)
    print('calinski-harabasz score: ', calinski_harabasz_score)
    dunn_score = dunn(ModK)
    print('dunn score: ', dunn_score)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    silhouette score:  0.29395443485220446
    davies-bouldin score:  3.92867662502562e+25
    calinski-harabasz score:  25.7026852571138
    dunn score:  1.679228880253539e-20




.. GENERATED FROM PYTHON SOURCE LINES 47-48

We can compute this score for differents values of n_clusters.

.. GENERATED FROM PYTHON SOURCE LINES 48-69

.. code-block:: default

    K = range(4,8)
    silhouette_scores = list()
    davies_bouldin_scores = list()
    calinski_harabasz_scores = list()
    dunn_scores = list()
    for k in K:
        ModK = ModKMeans(n_clusters=k, random_state=42)
        ModK.fit(raw, n_jobs=5, min_peak_distance=0)
    
        silhouette_score = silhouette(ModK)
        silhouette_scores.append(silhouette_score)
    
        davies_bouldin_score = davies_bouldin(ModK)
        davies_bouldin_scores.append(davies_bouldin_score)
    
        calinski_harabasz_score = calinski_harabasz(ModK)
        calinski_harabasz_scores.append(calinski_harabasz_score)
    
        dunn_score = dunn(ModK)
        dunn_scores.append(dunn_score)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]      5%|########1                                                                                                                                                          |  : 5/100 [00:00<00:10,    8.75it/s]     10%|################2                                                                                                                                                 |  : 10/100 [00:01<00:10,    8.61it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:02<00:10,    8.48it/s]     20%|################################4                                                                                                                                 |  : 20/100 [00:02<00:09,    8.37it/s]     25%|########################################5                                                                                                                         |  : 25/100 [00:03<00:08,    8.44it/s]     30%|################################################6                                                                                                                 |  : 30/100 [00:03<00:08,    8.38it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:04<00:07,    8.34it/s]     40%|################################################################8                                                                                                 |  : 40/100 [00:05<00:07,    8.21it/s]     45%|########################################################################9                                                                                         |  : 45/100 [00:06<00:06,    8.15it/s]     50%|#################################################################################                                                                                 |  : 50/100 [00:06<00:06,    8.05it/s]     55%|#########################################################################################1                                                                        |  : 55/100 [00:07<00:05,    7.86it/s]     60%|#################################################################################################2                                                                |  : 60/100 [00:08<00:05,    7.91it/s]     65%|#########################################################################################################3                                                        |  : 65/100 [00:09<00:04,    7.85it/s]     70%|#################################################################################################################4                                                |  : 70/100 [00:10<00:03,    7.65it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:10<00:03,    7.74it/s]     80%|#################################################################################################################################6                                |  : 80/100 [00:11<00:02,    7.68it/s]     85%|#########################################################################################################################################7                        |  : 85/100 [00:11<00:01,    7.78it/s]     90%|#################################################################################################################################################8                |  : 90/100 [00:12<00:01,    7.77it/s]     95%|#########################################################################################################################################################9        |  : 95/100 [00:13<00:00,    7.75it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:13<00:00,    7.67it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:13<00:00,    7.17it/s]
    Selecting run with highest GEV = 0.6816047968052895%.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 5 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]      5%|########1                                                                                                                                                          |  : 5/100 [00:00<00:11,    8.47it/s]     10%|################2                                                                                                                                                 |  : 10/100 [00:01<00:10,    8.52it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:01<00:10,    8.36it/s]     20%|################################4                                                                                                                                 |  : 20/100 [00:02<00:09,    8.27it/s]     25%|########################################5                                                                                                                         |  : 25/100 [00:03<00:09,    8.16it/s]     30%|################################################6                                                                                                                 |  : 30/100 [00:03<00:08,    8.24it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:04<00:07,    8.18it/s]     40%|################################################################8                                                                                                 |  : 40/100 [00:05<00:07,    7.96it/s]     45%|########################################################################9                                                                                         |  : 45/100 [00:06<00:06,    7.94it/s]     50%|#################################################################################                                                                                 |  : 50/100 [00:07<00:06,    7.74it/s]     55%|#########################################################################################1                                                                        |  : 55/100 [00:08<00:05,    7.50it/s]     60%|#################################################################################################2                                                                |  : 60/100 [00:09<00:05,    7.40it/s]     65%|#########################################################################################################3                                                        |  : 65/100 [00:09<00:04,    7.40it/s]     70%|#################################################################################################################4                                                |  : 70/100 [00:10<00:04,    7.27it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:11<00:03,    7.17it/s]     80%|#################################################################################################################################6                                |  : 80/100 [00:12<00:02,    7.11it/s]     85%|#########################################################################################################################################7                        |  : 85/100 [00:12<00:02,    7.17it/s]     90%|#################################################################################################################################################8                |  : 90/100 [00:13<00:01,    7.12it/s]     95%|#########################################################################################################################################################9        |  : 95/100 [00:14<00:00,    7.10it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:15<00:00,    7.06it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:15<00:00,    6.54it/s]
    Selecting run with highest GEV = 0.6953876070566268%.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 6 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]      5%|########1                                                                                                                                                          |  : 5/100 [00:00<00:09,    9.92it/s]     10%|################2                                                                                                                                                 |  : 10/100 [00:01<00:09,    9.84it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:01<00:08,    9.68it/s]     20%|################################4                                                                                                                                 |  : 20/100 [00:02<00:08,    9.26it/s]     25%|########################################5                                                                                                                         |  : 25/100 [00:03<00:08,    8.90it/s]     30%|################################################6                                                                                                                 |  : 30/100 [00:04<00:08,    8.67it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:05<00:07,    8.60it/s]     40%|################################################################8                                                                                                 |  : 40/100 [00:06<00:07,    8.21it/s]     45%|########################################################################9                                                                                         |  : 45/100 [00:07<00:06,    8.20it/s]     50%|#################################################################################                                                                                 |  : 50/100 [00:07<00:06,    8.08it/s]     55%|#########################################################################################1                                                                        |  : 55/100 [00:08<00:05,    7.91it/s]     60%|#################################################################################################2                                                                |  : 60/100 [00:09<00:05,    7.68it/s]     65%|#########################################################################################################3                                                        |  : 65/100 [00:10<00:04,    7.41it/s]     70%|#################################################################################################################4                                                |  : 70/100 [00:11<00:04,    7.42it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:12<00:03,    7.29it/s]     80%|#################################################################################################################################6                                |  : 80/100 [00:13<00:02,    7.16it/s]     85%|#########################################################################################################################################7                        |  : 85/100 [00:14<00:02,    7.07it/s]     90%|#################################################################################################################################################8                |  : 90/100 [00:15<00:01,    6.99it/s]     95%|#########################################################################################################################################################9        |  : 95/100 [00:16<00:00,    6.78it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:16<00:00,    6.81it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:16<00:00,    5.91it/s]
    Selecting run with highest GEV = 0.7071110041189713%.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 7 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]      5%|########1                                                                                                                                                          |  : 5/100 [00:00<00:14,    6.35it/s]     10%|################2                                                                                                                                                 |  : 10/100 [00:01<00:14,    6.27it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:02<00:13,    6.33it/s]     20%|################################4                                                                                                                                 |  : 20/100 [00:03<00:12,    6.29it/s]     25%|########################################5                                                                                                                         |  : 25/100 [00:04<00:12,    6.18it/s]     30%|################################################6                                                                                                                 |  : 30/100 [00:05<00:11,    6.21it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:06<00:10,    6.13it/s]     40%|################################################################8                                                                                                 |  : 40/100 [00:07<00:09,    6.11it/s]     45%|########################################################################9                                                                                         |  : 45/100 [00:07<00:09,    6.09it/s]     50%|#################################################################################                                                                                 |  : 50/100 [00:08<00:08,    6.07it/s]     55%|#########################################################################################1                                                                        |  : 55/100 [00:09<00:07,    6.06it/s]     60%|#################################################################################################2                                                                |  : 60/100 [00:11<00:06,    5.75it/s]     65%|#########################################################################################################3                                                        |  : 65/100 [00:12<00:06,    5.60it/s]     70%|#################################################################################################################4                                                |  : 70/100 [00:13<00:05,    5.70it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:14<00:04,    5.63it/s]     80%|#################################################################################################################################6                                |  : 80/100 [00:15<00:03,    5.54it/s]     85%|#########################################################################################################################################7                        |  : 85/100 [00:16<00:02,    5.48it/s]     90%|#################################################################################################################################################8                |  : 90/100 [00:17<00:01,    5.38it/s]     95%|#########################################################################################################################################################9        |  : 95/100 [00:18<00:00,    5.42it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:19<00:00,    5.36it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:19<00:00,    5.05it/s]
    Selecting run with highest GEV = 0.7177046233266179%.




.. GENERATED FROM PYTHON SOURCE LINES 70-71

We can compute this score for differents values of n_clusters.

.. GENERATED FROM PYTHON SOURCE LINES 71-86

.. code-block:: default

    import matplotlib.pyplot as plt

    fig, axs = plt.subplots(4,1)
    axs[0].plot(K,silhouette_scores)
    axs[0].set_title('Silhouette')
    axs[1].plot(K,davies_bouldin_scores)
    axs[1].set_title('davies-bouldin')
    axs[2].plot(K,calinski_harabasz_scores)
    axs[2].set_title('calinski-harabasz')
    axs[3].plot(K,dunn_scores)
    axs[3].set_title('Dunn')

    #sphinx_gallery_thumbnail_number = 2
    plt.tight_layout()
    plt.plot()



.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_find_best_number_of_clusters_002.png
    :alt: Silhouette, davies-bouldin, calinski-harabasz, Dunn
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    []




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  7.016 seconds)


.. _sphx_glr_download_auto_tutorials_clustering_plot_find_best_number_of_clusters.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_find_best_number_of_clusters.py <plot_find_best_number_of_clusters.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_find_best_number_of_clusters.ipynb <plot_find_best_number_of_clusters.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
