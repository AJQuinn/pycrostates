
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials\clustering\plot_modK.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_clustering_plot_modK.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_clustering_plot_modK.py:


The ModKmeans object
====================

This tutorial introduces the :class:`pycrostates.clustering.ModKMeans` structure in detail.

.. GENERATED FROM PYTHON SOURCE LINES 7-21

.. code-block:: default


    from mne.io import read_raw_eeglab

    from pycrostates.datasets import lemon
    from pycrostates.clustering import ModKMeans

    subject = 1
    runs = [1]

    raw_fname = lemon.load_data(subject='010004', condition='EC')
    raw = read_raw_eeglab(raw_fname, preload=True)

    raw.pick('eeg')
    raw.set_eeg_reference('average')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Reading C:\Users\ferat\pycrostates_data\PREPROCESSED_LEMON\sub-010004_EC.fdt
    Reading 0 ... 119277  =      0.000 ...   477.108 secs...
    C:\Users\ferat\Desktop\pycrostates\tutorials\clustering\plot_modK.py:17: RuntimeWarning: Limited 1 annotation(s) that were expanding outside the data range.
      raw = read_raw_eeglab(raw_fname, preload=True)
    C:\Users\ferat\Desktop\pycrostates\tutorials\clustering\plot_modK.py:17: RuntimeWarning: The data contains 'boundary' events, indicating data discontinuities. Be cautious of filtering and epoching around these events.
      raw = read_raw_eeglab(raw_fname, preload=True)
    EEG channel type selected for re-referencing
    Applying average reference.
    Applying a custom EEG reference.


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">


    <table class="table table-hover">
        <tr>
            <th>Measurement date</th>
    <td>Unknown</td>
        </tr>
        <tr>
            <th>Experimenter</th>
    <td>Unknown</td>
        </tr>
            <th>Participant</th>
    <td>Unknown</td>
        </tr>
        <tr>
            <th>Digitized points</th>
            <td>61 points</td>
        </tr>
        <tr>
            <th>Good channels</th>
            <td>0 magnetometer, 0 gradiometer,
                and 61 EEG channels</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td></td>
        
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>Not available</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
        <tr>
            <th>Sampling frequency</th>
            <td>250.00 Hz</td>
        </tr>
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
         <tr>
            <th>Lowpass</th>
            <td>125.00 Hz</td>
        </tr>

        <tr>
            <th>Filenames</th>
            <td>sub-010004_EC.fdt</td>
        </tr>
        <tr>
            <th>Duration</th>
            <td>00:07:57 (HH:MM:SS)</td>
        </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 22-25

The modified Kmeans can be instanciated with the number of cluster centers n_clusters to compute.
By default, the modified Kmeans will only work with EEG data, but this can be modified thanks to the ''picks'' parameter.
A random_state can be defined during class definition in order to have reproducible results.

.. GENERATED FROM PYTHON SOURCE LINES 25-28

.. code-block:: default

    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters, random_state=42)








.. GENERATED FROM PYTHON SOURCE LINES 29-31

Most methods need the modified Kmeans to be fitted. This can be done with either :class:`mne.io.Raw`: or :class:`mne.epochs.Epcohs`: data structures:
Note that, depending on your setup, you can change ``n_jobs=1`` in order to use parallel processing and reduce computation time.

.. GENERATED FROM PYTHON SOURCE LINES 31-33

.. code-block:: default

    ModK.fit(raw, n_jobs=5)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|                                                                                                                                         |  : 0/100 [00:00<?,       ?it/s]      5%|######6                                                                                                                              |  : 5/100 [00:24<07:45,    4.90s/it]     10%|#############2                                                                                                                      |  : 10/100 [00:41<07:14,    4.83s/it]     15%|###################8                                                                                                                |  : 15/100 [01:05<06:49,    4.82s/it]     20%|##########################4                                                                                                         |  : 20/100 [01:26<06:23,    4.80s/it]     25%|#################################                                                                                                   |  : 25/100 [01:48<05:57,    4.77s/it]     30%|#######################################6                                                                                            |  : 30/100 [02:18<05:38,    4.84s/it]     35%|##############################################1                                                                                     |  : 35/100 [02:58<05:24,    5.00s/it]     40%|####################################################8                                                                               |  : 40/100 [03:25<05:00,    5.01s/it]     45%|###########################################################4                                                                        |  : 45/100 [03:46<04:33,    4.97s/it]     50%|##################################################################                                                                  |  : 50/100 [04:07<04:06,    4.94s/it]     55%|########################################################################6                                                           |  : 55/100 [04:38<03:44,    5.00s/it]     60%|###############################################################################2                                                    |  : 60/100 [05:05<03:20,    5.02s/it]     65%|#####################################################################################8                                              |  : 65/100 [05:26<02:54,    4.98s/it]     70%|############################################################################################3                                       |  : 70/100 [05:45<02:27,    4.92s/it]     75%|###################################################################################################                                 |  : 75/100 [06:08<02:02,    4.90s/it]     80%|#########################################################################################################6                          |  : 80/100 [06:33<01:38,    4.91s/it]     85%|################################################################################################################2                   |  : 85/100 [07:02<01:14,    4.95s/it]     90%|######################################################################################################################8             |  : 90/100 [07:18<00:48,    4.86s/it]     95%|#############################################################################################################################4      |  : 95/100 [07:41<00:24,    4.85s/it]    100%|###################################################################################################################################|  : 100/100 [08:00<00:00,    4.80s/it]    100%|###################################################################################################################################|  : 100/100 [08:00<00:00,    4.80s/it]




.. GENERATED FROM PYTHON SOURCE LINES 34-37

Now that our algorithm is fitted, we can visualise the cluster centers, also called microstate maps or microstate topographies
using :meth:`ModK.plot`. Note than this method uses the :class:`~mne.Info` object of the fitted instance to display
the topographies.

.. GENERATED FROM PYTHON SOURCE LINES 37-39

.. code-block:: default

    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_001.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<AxesSubplot:title={'center':'1'}>,
           <AxesSubplot:title={'center':'2'}>,
           <AxesSubplot:title={'center':'3'}>,
           <AxesSubplot:title={'center':'4'}>], dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 40-41

One can access the cluster centers as a numpy array thanks to :meth:`ModK.get_cluster_centers`:

.. GENERATED FROM PYTHON SOURCE LINES 41-43

.. code-block:: default

    ModK.get_cluster_centers()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[ 0.07381024,  0.04710199,  0.12520982, -0.02601937, -0.14717337,
            -0.07509971,  0.12016626,  0.04122596, -0.19130286, -0.19770768,
             0.01822134,  0.04283633, -0.10061514, -0.22760304, -0.11089972,
             0.15857928,  0.0151836 , -0.16793389, -0.1632758 ,  0.03428453,
            -0.07114487,  0.15026611, -0.0540907 , -0.113143  , -0.07629894,
             0.20398685,  0.23217537,  0.14710009,  0.13428261,  0.18084888,
             0.27881216,  0.07797705, -0.0486564 , -0.04455414,  0.08488465,
             0.00181844, -0.14669592, -0.14588996, -0.0734404 ,  0.13601394,
            -0.10696459, -0.11423534,  0.13942581,  0.04034969, -0.19521414,
            -0.20133433,  0.03034397,  0.16517336, -0.09856519, -0.1786145 ,
            -0.09408092,  0.17387722,  0.03345478, -0.11084078, -0.07696383,
             0.07954213,  0.14755513,  0.01504159, -0.00407977,  0.03900918,
             0.19387995],
           [-0.12265378, -0.16899012, -0.07123968, -0.11429114, -0.16203695,
            -0.17394557, -0.13386329, -0.0505465 , -0.10984986, -0.14437074,
            -0.11580214,  0.01571055, -0.00773748, -0.06730437, -0.06585617,
            -0.02951673,  0.09380464,  0.03948945,  0.00056253,  0.03131208,
            -0.18017939,  0.17489218,  0.14464732,  0.09548968,  0.0852298 ,
             0.12727246,  0.17325719,  0.23202097,  0.18526289,  0.18372715,
             0.13772109, -0.11849223, -0.15516711, -0.18240727, -0.16124283,
            -0.10795409, -0.16090893, -0.17759019, -0.17333781, -0.0308672 ,
            -0.07874971, -0.13549721, -0.08725123,  0.01546902, -0.03699565,
            -0.07311537, -0.04634301,  0.11643565,  0.07158697,  0.02504071,
             0.01413062,  0.04931781,  0.16770694,  0.1150039 ,  0.0857034 ,
             0.11688644,  0.23371794,  0.20661695,  0.16569889,  0.15665007,
             0.18373847],
           [-0.15692806, -0.07346526, -0.19702159, -0.18051766, -0.1366646 ,
            -0.05202635,  0.01296969, -0.16719569, -0.12683401, -0.05553955,
             0.03186106, -0.13020901, -0.11415097, -0.05093667,  0.06109555,
             0.11940552, -0.07015396, -0.03711462,  0.06431647,  0.16734475,
            -0.13261746, -0.01083504, -0.00394835,  0.06256385,  0.13435649,
             0.25715037,  0.05789134,  0.1008538 ,  0.15113904,  0.25380492,
             0.21884488, -0.16100521, -0.16437371, -0.08544911, -0.02434005,
            -0.18494765, -0.13798933, -0.09186448, -0.05115158, -0.17693903,
            -0.15110703, -0.00770489,  0.05730266, -0.13007   , -0.0841346 ,
             0.00526448,  0.09978353, -0.06771765, -0.05979655,  0.01608299,
             0.12260215,  0.19388274, -0.00748229,  0.0189312 ,  0.13402827,
             0.23187946,  0.0557688 ,  0.05980699,  0.11980404,  0.20174326,
             0.27175369],
           [ 0.07545896, -0.13753128,  0.21082612,  0.10759289, -0.02361595,
            -0.15351886, -0.20903313,  0.1632985 ,  0.02312336, -0.10196273,
            -0.18340129,  0.17973836,  0.12139212, -0.0218718 , -0.14431162,
            -0.17214598,  0.17823485,  0.07190529, -0.07203712, -0.14444786,
            -0.05410125,  0.1922377 ,  0.14128331,  0.02499362, -0.05339924,
            -0.12001135,  0.11310426,  0.11709196,  0.0336354 , -0.05744829,
            -0.06699891,  0.08873976,  0.02863229, -0.12734319, -0.20853261,
             0.12542885, -0.02057625, -0.10198565, -0.15427735,  0.21153574,
             0.09448288, -0.15223741, -0.18619776,  0.17891328,  0.04745796,
            -0.08969901, -0.16866315,  0.21164066,  0.13303803,  0.00091063,
            -0.1179712 , -0.14909739,  0.17345089,  0.08629267, -0.05289373,
            -0.11134826,  0.16573695,  0.13248038,  0.03949861, -0.04120569,
            -0.07429097]])



.. GENERATED FROM PYTHON SOURCE LINES 44-45

or as a :class:`mne.io.Raw` object:

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: default

    ModK.get_cluster_centers_as_raw()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Creating RawArray with float64 data, n_channels=61, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.012 secs
    Ready.

    <RawArray | 61 x 4 (0.0 s), ~86 kB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 48-49

Clusters centers can be reordered using :meth:`ModK.reorder`:

.. GENERATED FROM PYTHON SOURCE LINES 49-52

.. code-block:: default

    ModK.reorder([0,3,2,1])
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_002.png
    :alt: 1, 4, 3, 2
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<AxesSubplot:title={'center':'1'}>,
           <AxesSubplot:title={'center':'4'}>,
           <AxesSubplot:title={'center':'3'}>,
           <AxesSubplot:title={'center':'2'}>], dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 53-54

and renamed using :meth:`ModK.rename`:

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default

    ModK.rename_clusters(['A', 'B', 'C', 'E'])
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_003.png
    :alt: A, B, C, E
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<AxesSubplot:title={'center':'A'}>,
           <AxesSubplot:title={'center':'B'}>,
           <AxesSubplot:title={'center':'C'}>,
           <AxesSubplot:title={'center':'E'}>], dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 58-60

Maps polarities can be inverted thanks to :meth:`ModK.invert_polarity` method. Note that this only affects visualisation:
this has not effect during backfitting as polarities are ignored.

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default

    ModK.invert_polarity([False, False, True, True])
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_004.png
    :alt: A, B, C, E
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<AxesSubplot:title={'center':'A'}>,
           <AxesSubplot:title={'center':'B'}>,
           <AxesSubplot:title={'center':'C'}>,
           <AxesSubplot:title={'center':'E'}>], dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 64-70

Finaly, the modified Kmeans can be used to predict the microstates segmentation using the :meth:`ModK.predict` method:
By default, semgents annoated as bad will no be labeled: this behavior can be changed by changing the `reject_by_annotation` paramerts.
Smoothing can be performed on the output sequence by setting the `factor` parameter > 0 (no smotthing by default factor = 0) while the
`half_window_size` parameter is used to specify the smoothing temporal span.
Finaly, the `rejected_first_last_segments` parameter allows not to assign the first and last segment of each record (or each epoch) as these can be incomplete.
Should have little impact for raw, but can be important when working with epochs.

.. GENERATED FROM PYTHON SOURCE LINES 70-72

.. code-block:: default


    segmentation = ModK.predict(raw, reject_by_annotation=True, factor=10, half_window_size=30, rejected_first_last_segments=True)
    segmentation.plot()


.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_005.png
    :alt: Segmentation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 1000x400 with 2 Axes>, [<matplotlib.lines.Line2D object at 0x0000024591586548>])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 8 minutes  23.589 seconds)


.. _sphx_glr_download_auto_tutorials_clustering_plot_modK.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_modK.py <plot_modK.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_modK.ipynb <plot_modK.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
