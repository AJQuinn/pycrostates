
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials\clustering\plot_modK.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_clustering_plot_modK.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_clustering_plot_modK.py:


The ModKmeans object
====================

This tutorial introduces the :class:`pycrostates.clustering.ModKMeans` structure in detail.

.. GENERATED FROM PYTHON SOURCE LINES 7-27

.. code-block:: default


    from mne.io import read_raw_edf
    from mne.datasets import eegbci
    from mne.channels import make_standard_montage

    from pycrostates.clustering import ModKMeans

    subject = 1
    runs = [1]

    raw_fnames = eegbci.load_data(subject, runs, update_path=True)[0]
    raw = read_raw_edf(raw_fnames, preload=True)
    eegbci.standardize(raw)  # set channel names

    raw.rename_channels(lambda x: x.strip('.'))
    montage = make_standard_montage('standard_1005')
    raw.set_montage(montage)

    raw.pick('eeg')
    raw.set_eeg_reference('average')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Extracting EDF parameters from C:\Users\Victor\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R01.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    EEG channel type selected for re-referencing
    Applying average reference.
    Applying a custom EEG reference.

    <RawEDF | S001R01.edf, 64 x 9760 (61.0 s), ~4.9 MB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 28-31

The modified Kmeans can be instanciated with the number of cluster centers n_clusters to compute.
By default, the modified Kmeans will only work with EEG data, but this can be modified thanks to the ''picks'' parameter.
A random_state can be defined during class definition in order to have reproducible results.

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: default

    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters, random_state=42)








.. GENERATED FROM PYTHON SOURCE LINES 35-39

Most methods need the modified Kmeans to be fitted. This can be done with either :class:`mne.io.Raw`: or :class:`mne.epochs.Epcohs`: data structures:
Global field power peaks extraction can be perform on the fly by setting the min_peak_distance parameter != 0. If min_peak_distance parameter = 0 no extraction is done
and the data is used as it is.
Note that, depending on your setup, you can change ``n_jobs=1`` in order to use parallel processing and reduce computation time.

.. GENERATED FROM PYTHON SOURCE LINES 39-41

.. code-block:: default

    ModK.fit(raw, min_peak_distance=2, n_jobs=5)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data by selecting Gfppeaks with minimum distance of 0.32ms(2 samples)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                            |  : 0/100 [00:00<?,       ?it/s]      5%|#2                      |  : 5/100 [00:00<00:01,   76.93it/s]     15%|###4                   |  : 15/100 [00:00<00:01,   76.69it/s]     35%|########               |  : 35/100 [00:00<00:00,   75.29it/s]     55%|############6          |  : 55/100 [00:01<00:00,   72.85it/s]     75%|#################2     |  : 75/100 [00:01<00:00,   69.40it/s]     95%|#####################8 |  : 95/100 [00:02<00:00,   67.24it/s]    100%|######################|  : 100/100 [00:02<00:00,   49.36it/s]
    Selecting run with highest GEV = 0.687190794481165%.

    ()



.. GENERATED FROM PYTHON SOURCE LINES 42-45

Now that our algorithm is fitted, we can visualise the cluster centers, also called microstate maps or microstate topographies
using :meth:`ModK.plot`. Note than this method uses the :class:`~mne.Info` object of the fitted instance to display
the topographies.

.. GENERATED FROM PYTHON SOURCE LINES 45-47

.. code-block:: default

    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_001.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB48EE688>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB5DDFA08>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB5E0E488>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB5E5BE48>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 48-49

One can access the cluster centers as a numpy array thanks to :meth:`ModK.get_cluster_centers`:

.. GENERATED FROM PYTHON SOURCE LINES 49-51

.. code-block:: default

    ModK.get_cluster_centers()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[ 1.42230808e-01,  7.58011607e-02,  2.47248641e-02,
            -2.05707630e-02, -4.60869791e-02, -5.94171386e-02,
            -9.13476665e-02,  7.13912192e-02,  1.93248927e-02,
            -1.82381959e-02, -5.65961143e-02, -7.41535897e-02,
            -9.73746022e-02, -1.07908861e-01,  1.32351827e-02,
            -1.30978470e-02, -3.94211761e-02, -6.20736438e-02,
            -8.54994718e-02, -1.00147575e-01, -1.12558976e-01,
             3.38212876e-01,  2.32400061e-01,  2.21203853e-01,
             3.53319851e-01,  3.39186476e-01,  8.86806638e-02,
             5.08705440e-02,  8.08628469e-02,  2.70048327e-01,
             2.22976819e-01,  4.82439304e-02,  7.84712929e-02,
             3.90280884e-02,  1.34113194e-02,  1.03043982e-02,
            -4.05164072e-02, -1.51759328e-01,  1.79422834e-01,
            -1.14323932e-01,  1.06676173e-01, -1.21389087e-01,
             9.36525278e-02, -1.21394455e-01,  4.38928798e-02,
            -1.21046042e-01, -1.99750503e-02, -3.29703381e-02,
            -3.37803039e-02, -6.61235847e-02, -8.09894357e-02,
            -1.04670397e-01, -1.10214908e-01, -1.18941798e-01,
            -1.22976455e-01, -5.88502517e-02, -5.91383712e-02,
            -9.06383465e-02, -1.25761702e-01, -1.24445758e-01,
            -7.21939627e-02, -8.95713276e-02, -1.09024030e-01,
            -8.23860194e-02],
           [ 1.10276333e-01,  1.06088583e-01,  1.20664317e-01,
             1.44098385e-01,  1.22958742e-01,  9.84200658e-02,
             8.75422835e-02,  5.04622585e-02,  3.70535933e-02,
             3.64960448e-02,  3.33588515e-02,  3.69158305e-02,
             2.36860925e-02,  2.75887120e-02, -2.34381028e-02,
            -2.57107850e-02, -4.11269621e-02, -4.94381688e-02,
            -4.55424057e-02, -5.48078992e-02, -3.69787944e-02,
             1.17548993e-01,  1.13087228e-01,  1.09143444e-01,
             1.25658956e-01,  1.28290942e-01,  1.68467566e-01,
             1.35920386e-01,  1.00772168e-01,  1.20365543e-01,
             1.32195927e-01,  1.33498427e-01,  1.59820851e-01,
             1.63201788e-01,  1.52040802e-01,  1.36190791e-01,
             1.12461792e-01,  1.06364175e-01,  7.83292996e-02,
             6.20075557e-02,  4.09707441e-02,  1.69654749e-02,
             2.46727565e-02,  1.47251817e-02, -1.47642596e-02,
            -4.86579908e-02, -1.11955025e-01, -1.19839002e-01,
            -1.24612915e-01, -1.64848732e-01, -1.47561814e-01,
            -1.63771454e-01, -1.51010683e-01, -1.39122625e-01,
            -1.37545676e-01, -1.88968637e-01, -1.92707321e-01,
            -2.21357511e-01, -2.02263890e-01, -2.16106537e-01,
            -2.12540765e-01, -2.22357639e-01, -2.36622401e-01,
            -1.94652888e-01],
           [-1.55557945e-02, -5.78723323e-03, -9.73752068e-03,
            -1.06293188e-02, -1.48648355e-02, -1.15948078e-02,
            -1.60140726e-02,  3.97293353e-02,  3.75806360e-02,
             3.38889609e-02,  3.82753366e-02,  2.60680039e-02,
             2.90268742e-02,  3.17990660e-02,  6.99917592e-02,
             6.24334864e-02,  6.06228006e-02,  6.32882082e-02,
             5.94503462e-02,  6.14106749e-02,  6.26621102e-02,
            -3.60064562e-01, -3.07230126e-01, -3.48521418e-01,
            -2.84318156e-01, -2.74603467e-01, -1.38981151e-01,
            -1.95337560e-01, -3.11278402e-01, -8.15727170e-02,
            -1.22277153e-01, -7.29546156e-02, -7.16473029e-02,
            -6.77639352e-02, -7.57583565e-02, -7.45113112e-02,
            -9.75459132e-02, -7.16251456e-02,  5.59044035e-05,
             2.85600866e-03,  5.25149299e-02,  4.95320959e-02,
             6.51057964e-02,  8.42056265e-02,  7.16188590e-02,
             7.59215358e-02,  9.89287623e-02,  9.62137721e-02,
             9.32991677e-02,  9.91138624e-02,  9.50083852e-02,
             9.82162043e-02,  9.35263859e-02,  9.65931504e-02,
             1.00080390e-01,  1.19461886e-01,  1.13329101e-01,
             1.19108978e-01,  1.18495648e-01,  1.28818086e-01,
             1.28047713e-01,  1.29052051e-01,  1.19556398e-01,
             1.15286579e-01],
           [ 1.14977133e-01,  8.90744483e-02,  4.33441528e-02,
            -2.04595105e-02, -5.74431411e-02, -1.24634094e-01,
            -1.79710856e-01,  1.35857281e-01,  1.06779761e-01,
             7.80537491e-02,  4.03284644e-02, -1.56527096e-02,
            -5.95914567e-02, -1.28058523e-01,  1.38266980e-01,
             1.14515040e-01,  1.04478514e-01,  7.41772840e-02,
             2.58199758e-02, -1.15404639e-02, -6.20593615e-02,
            -1.39691492e-01, -1.59172764e-01, -2.14375173e-01,
            -3.91974767e-02, -3.80094460e-02, -8.50964981e-02,
            -1.82091239e-01, -2.91699380e-01,  9.92056529e-02,
             4.89985329e-02, -2.42869956e-02,  1.29270167e-03,
            -5.07187159e-02, -9.52208881e-02, -1.11950716e-01,
            -2.07819404e-01, -3.32927652e-01,  1.19722236e-01,
            -2.36088878e-01,  1.32424943e-01, -1.89893592e-01,
             1.06453978e-01, -1.88599074e-01,  1.34981424e-01,
            -1.00849792e-01,  1.46897457e-01,  1.42015479e-01,
             1.39469788e-01,  1.27536988e-01,  9.67846028e-02,
             6.29632771e-02,  2.92432775e-02, -6.96102230e-03,
            -3.32163100e-02,  1.46497307e-01,  1.50518123e-01,
             1.15154274e-01,  4.24953814e-02,  3.82401219e-02,
             1.49013238e-01,  1.24292699e-01,  8.22447364e-02,
             8.48976220e-02]])



.. GENERATED FROM PYTHON SOURCE LINES 52-53

or as a :class:`mne.io.Raw` object:

.. GENERATED FROM PYTHON SOURCE LINES 53-55

.. code-block:: default

    ModK.get_cluster_centers_as_raw()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.

    <RawArray | 64 x 4 (0.0 s), ~93 kB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 56-57

Clusters centers can be reordered using :meth:`ModK.reorder`:

.. GENERATED FROM PYTHON SOURCE LINES 57-60

.. code-block:: default

    ModK.reorder([3,0,2,1])
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_002.png
    :alt: 4, 1, 3, 2
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB64E66C8>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB66A64C8>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB66DC608>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB6714808>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 61-62

and renamed using :meth:`ModK.rename`:

.. GENERATED FROM PYTHON SOURCE LINES 62-65

.. code-block:: default

    ModK.rename_clusters(['A', 'B', 'C', 'D'])
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_003.png
    :alt: A, B, C, D
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB6732208>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB6981548>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB69B9688>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB69F2888>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 66-68

Maps polarities can be inverted thanks to :meth:`ModK.invert_polarity` method. Note that this only affects visualisation:
this has not effect during backfitting as polarities are ignored.

.. GENERATED FROM PYTHON SOURCE LINES 68-71

.. code-block:: default

    ModK.invert_polarity([False, False, True, True])
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_004.png
    :alt: A, B, C, D
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB6AAEC08>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB6B28948>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB717EA88>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DAB71B7C88>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 72-78

Finaly, the modified Kmeans can be used to predict the microstates segmentation using the :meth:`ModK.predict` method:
By default, semgents annoated as bad will no be labeled: this behavior can be changed by changing the `reject_by_annotation` paramerts.
Smoothing can be performed on the output sequence by setting the `factor` parameter > 0 (no smotthing by default factor = 0) while the
`half_window_size` parameter is used to specify the smoothing temporal span.
Finaly, the `rejected_first_last_segments` parameter allows not to assign the first and last segment of each record (or each epoch) as these can be incomplete.
Should have little impact for raw, but can be important when working with epochs.

.. GENERATED FROM PYTHON SOURCE LINES 78-80

.. code-block:: default


    segmentation = ModK.predict(raw, reject_by_annotation=True, factor=10, half_window_size=30, rejected_first_last_segments=True)
    segmentation.plot()


.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_005.png
    :alt: Segmentation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Segmenting data with factor 10 and effective smoothing window size : 0.38125 (ms)
    Rejecting first and last segment

    (<Figure size 1000x400 with 2 Axes>, [<matplotlib.lines.Line2D object at 0x000001DAB7DCD888>])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.213 seconds)


.. _sphx_glr_download_auto_tutorials_clustering_plot_modK.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_modK.py <plot_modK.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_modK.ipynb <plot_modK.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
