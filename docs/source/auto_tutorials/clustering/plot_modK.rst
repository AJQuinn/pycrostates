
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials\clustering\plot_modK.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_clustering_plot_modK.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_clustering_plot_modK.py:


The ModKmeans object
====================

This tutorial introduces the :class:`pycrostates.clustering.ModKMeans` structure in detail.

.. GENERATED FROM PYTHON SOURCE LINES 7-27

.. code-block:: default


    from mne.io import read_raw_edf
    from mne.datasets import eegbci
    from mne.channels import make_standard_montage

    from pycrostates.clustering import ModKMeans

    subject = 1
    runs = [1]

    raw_fnames = eegbci.load_data(subject, runs, update_path=True)[0]
    raw = read_raw_edf(raw_fnames, preload=True)
    eegbci.standardize(raw)  # set channel names

    raw.rename_channels(lambda x: x.strip('.'))
    montage = make_standard_montage('standard_1005')
    raw.set_montage(montage)

    raw.pick('eeg')
    raw.set_eeg_reference('average')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Extracting EDF parameters from C:\Users\Victor\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R01.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    EEG channel type selected for re-referencing
    Applying average reference.
    Applying a custom EEG reference.

    <RawEDF | S001R01.edf, 64 x 9760 (61.0 s), ~4.9 MB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 28-31

The modified Kmeans can be instanciated with the number of cluster centers n_clusters to compute.
By default, the modified Kmeans will only work with EEG data, but this can be modified thanks to the ''picks'' parameter.
A random_state can be defined during class definition in order to have reproducible results.

.. GENERATED FROM PYTHON SOURCE LINES 31-34

.. code-block:: default

    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters, random_state=42)








.. GENERATED FROM PYTHON SOURCE LINES 35-37

Most methods need the modified Kmeans to be fitted. This can be done with either :class:`mne.io.Raw`: or :class:`mne.epochs.Epcohs`: data structures:
Note that, depending on your setup, you can change ``n_jobs=1`` in order to use parallel processing and reduce computation time.

.. GENERATED FROM PYTHON SOURCE LINES 37-39

.. code-block:: default

    ModK.fit(raw, n_jobs=5)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                   |  : 0/100 [00:00<?,       ?it/s]      5%|#######1                                                                                                                                       |  : 5/100 [00:04<01:18,    1.21it/s]     10%|##############2                                                                                                                               |  : 10/100 [00:04<01:10,    1.27it/s]     15%|#####################3                                                                                                                        |  : 15/100 [00:05<01:04,    1.33it/s]     20%|############################4                                                                                                                 |  : 20/100 [00:05<00:57,    1.38it/s]     25%|###################################5                                                                                                          |  : 25/100 [00:06<00:51,    1.45it/s]     30%|##########################################6                                                                                                   |  : 30/100 [00:06<00:46,    1.51it/s]     35%|#################################################6                                                                                            |  : 35/100 [00:07<00:41,    1.58it/s]     40%|########################################################8                                                                                     |  : 40/100 [00:07<00:36,    1.65it/s]     45%|###############################################################9                                                                              |  : 45/100 [00:08<00:31,    1.72it/s]     50%|#######################################################################                                                                       |  : 50/100 [00:08<00:27,    1.79it/s]     55%|##############################################################################1                                                               |  : 55/100 [00:09<00:24,    1.86it/s]     60%|#####################################################################################2                                                        |  : 60/100 [00:10<00:20,    1.94it/s]     65%|############################################################################################3                                                 |  : 65/100 [00:10<00:17,    2.02it/s]     70%|###################################################################################################3                                          |  : 70/100 [00:11<00:14,    2.10it/s]     75%|##########################################################################################################5                                   |  : 75/100 [00:11<00:11,    2.19it/s]     80%|#################################################################################################################6                            |  : 80/100 [00:12<00:08,    2.27it/s]     85%|########################################################################################################################7                     |  : 85/100 [00:12<00:06,    2.37it/s]     90%|###############################################################################################################################8              |  : 90/100 [00:13<00:04,    2.46it/s]     95%|######################################################################################################################################9       |  : 95/100 [00:13<00:01,    2.56it/s]    100%|#############################################################################################################################################|  : 100/100 [00:14<00:00,    2.65it/s]    100%|#############################################################################################################################################|  : 100/100 [00:14<00:00,    7.04it/s]
    Selecting run with highest GEV = 0.6816047968052894%.

    ()



.. GENERATED FROM PYTHON SOURCE LINES 40-43

Now that our algorithm is fitted, we can visualise the cluster centers, also called microstate maps or microstate topographies
using :meth:`ModK.plot`. Note than this method uses the :class:`~mne.Info` object of the fitted instance to display
the topographies.

.. GENERATED FROM PYTHON SOURCE LINES 43-45

.. code-block:: default

    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_001.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x0000019E92DA9108>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E92DEA4C8>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E8FF22EC8>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E8FF5CB48>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 46-47

One can access the cluster centers as a numpy array thanks to :meth:`ModK.get_cluster_centers`:

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: default

    ModK.get_cluster_centers()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([[ 7.49808656e-03,  1.54598468e-04,  5.86832905e-03,
             6.44930343e-03,  1.13705585e-02,  8.41731447e-03,
             1.38532852e-02, -4.51539774e-02, -3.93052339e-02,
            -3.61211553e-02, -4.04625651e-02, -2.88231757e-02,
            -3.16755581e-02, -3.43099001e-02, -7.02101668e-02,
            -6.21214457e-02, -6.11880045e-02, -6.49728400e-02,
            -6.09867462e-02, -6.23666236e-02, -6.31864760e-02,
             3.62770977e-01,  3.10542609e-01,  3.55199640e-01,
             2.85935256e-01,  2.76092743e-01,  1.37079986e-01,
             1.98214332e-01,  3.18647094e-01,  7.39196166e-02,
             1.15425387e-01,  7.14478427e-02,  6.83601107e-02,
             6.50657112e-02,  7.43292334e-02,  7.30046032e-02,
             9.95225727e-02,  7.52100616e-02, -6.64015283e-03,
            -3.65282739e-03, -5.52085257e-02, -4.86789885e-02,
            -7.75621361e-02, -9.26958889e-02, -7.34821828e-02,
            -7.65466895e-02, -9.62056122e-02, -9.03770048e-02,
            -8.74205199e-02, -9.34978480e-02, -9.03184460e-02,
            -9.34491400e-02, -8.87788211e-02, -9.30017051e-02,
            -9.74132988e-02, -1.13379416e-01, -1.06977837e-01,
            -1.12535313e-01, -1.12345707e-01, -1.22079516e-01,
            -1.24867497e-01, -1.26225742e-01, -1.14344522e-01,
            -1.15810046e-01],
           [-1.35751051e-01, -6.53168701e-02, -1.73002726e-02,
             2.65993265e-02,  5.22076451e-02,  6.61378256e-02,
             9.53920797e-02, -6.45424689e-02, -1.14015097e-02,
             2.36820863e-02,  5.84944024e-02,  7.95777567e-02,
             9.79726828e-02,  1.08077880e-01, -7.91525304e-03,
             1.76689791e-02,  4.12601994e-02,  6.16797610e-02,
             8.35609844e-02,  9.80416000e-02,  1.11281374e-01,
            -3.52368327e-01, -2.45016164e-01, -2.41543721e-01,
            -3.60337820e-01, -3.46461748e-01, -8.51098196e-02,
            -5.31455798e-02, -9.12392911e-02, -2.58495495e-01,
            -2.16974267e-01, -4.38650700e-02, -7.02147987e-02,
            -3.10299439e-02, -8.37624298e-03, -3.13212841e-03,
             4.14602685e-02,  1.69810582e-01, -1.66800598e-01,
             1.24182866e-01, -9.45261384e-02,  1.26216044e-01,
            -8.22385375e-02,  1.31217210e-01, -3.95380748e-02,
             1.15810142e-01,  1.91208106e-02,  2.94644370e-02,
             2.86366446e-02,  5.92027922e-02,  7.25181035e-02,
             9.49726913e-02,  1.00697211e-01,  1.08467752e-01,
             1.13072298e-01,  5.06657355e-02,  5.06665131e-02,
             7.96616605e-02,  1.15214082e-01,  1.11385796e-01,
             6.79379172e-02,  8.22758462e-02,  9.76557198e-02,
             8.06934856e-02],
           [-1.39560075e-01, -1.06592336e-01, -5.73846061e-02,
             8.12110781e-03,  4.63766882e-02,  1.18005682e-01,
             1.75576203e-01, -1.50409196e-01, -1.11384578e-01,
            -8.48326225e-02, -4.77057106e-02,  1.25878261e-02,
             5.70680696e-02,  1.25727387e-01, -1.33797355e-01,
            -1.12071888e-01, -1.03160001e-01, -7.28849288e-02,
            -2.51920206e-02,  1.47899966e-02,  6.52846808e-02,
             1.33807134e-01,  1.58170047e-01,  2.16683664e-01,
             1.65865470e-02,  1.53854925e-02,  7.10339104e-02,
             1.79244948e-01,  3.06960915e-01, -1.29669201e-01,
            -7.36697790e-02,  6.59939830e-03, -2.01214448e-02,
             3.44049110e-02,  8.14316578e-02,  1.02547584e-01,
             2.06895092e-01,  3.56204485e-01, -1.42711704e-01,
             2.41263456e-01, -1.42915716e-01,  1.80857617e-01,
            -1.24641611e-01,  1.98542038e-01, -1.39103441e-01,
             1.13499671e-01, -1.33263230e-01, -1.27277801e-01,
            -1.27964135e-01, -1.14557101e-01, -8.75981606e-02,
            -5.14367382e-02, -1.95291164e-02,  1.94510716e-02,
             4.94882342e-02, -1.25852070e-01, -1.33136900e-01,
            -1.00462757e-01, -2.51000706e-02, -1.77225825e-02,
            -1.22054881e-01, -9.82938400e-02, -5.55024081e-02,
            -5.50355101e-02],
           [ 1.01750620e-01,  8.80288656e-02,  1.06389379e-01,
             1.29289428e-01,  1.10948128e-01,  9.16250221e-02,
             9.45103454e-02,  3.76246665e-02,  1.82821096e-02,
             1.38051360e-02,  1.22207133e-02,  2.08554012e-02,
             1.28959576e-02,  3.20848119e-02, -3.53568949e-02,
            -4.39542399e-02, -6.32281160e-02, -7.05996722e-02,
            -6.07571089e-02, -6.45918714e-02, -3.62875234e-02,
             1.11934279e-01,  1.18600859e-01,  1.16383221e-01,
             1.24635923e-01,  1.28568498e-01,  1.75517203e-01,
             1.48296848e-01,  1.08472492e-01,  1.27909100e-01,
             1.29522124e-01,  1.33311103e-01,  1.57798260e-01,
             1.63855234e-01,  1.56317232e-01,  1.44166099e-01,
             1.28027131e-01,  1.29725776e-01,  8.33876269e-02,
             8.27826521e-02,  4.79781574e-02,  3.76966782e-02,
             3.08653134e-02,  3.86069216e-02, -5.69882675e-03,
            -2.73179729e-02, -1.03862250e-01, -1.17145474e-01,
            -1.24691527e-01, -1.69891122e-01, -1.50392873e-01,
            -1.61810455e-01, -1.44772372e-01, -1.26045451e-01,
            -1.19150475e-01, -1.82064461e-01, -1.90250310e-01,
            -2.19602121e-01, -1.92122801e-01, -1.98973060e-01,
            -2.22398310e-01, -2.28712787e-01, -2.43295646e-01,
            -1.91695593e-01]])



.. GENERATED FROM PYTHON SOURCE LINES 50-51

or as a :class:`mne.io.Raw` object:

.. GENERATED FROM PYTHON SOURCE LINES 51-53

.. code-block:: default

    ModK.get_cluster_centers_as_raw()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.

    <RawArray | 64 x 4 (0.0 s), ~93 kB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 54-55

Clusters centers can be reordered using :meth:`ModK.reorder`:

.. GENERATED FROM PYTHON SOURCE LINES 55-58

.. code-block:: default

    ModK.reorder([3,0,2,1])
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_002.png
    :alt: 4, 1, 3, 2
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x0000019E9021BAC8>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E90241388>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E902793C8>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E902B45C8>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 59-60

and renamed using :meth:`ModK.rename`:

.. GENERATED FROM PYTHON SOURCE LINES 60-63

.. code-block:: default

    ModK.rename_clusters(['A', 'B', 'C', 'D'])
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_003.png
    :alt: A, B, C, D
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x0000019E9021A308>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E92F81A08>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E92FBAA48>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E92FF2C48>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 64-66

Maps polarities can be inverted thanks to :meth:`ModK.invert_polarity` method. Note that this only affects visualisation:
this has not effect during backfitting as polarities are ignored.

.. GENERATED FROM PYTHON SOURCE LINES 66-69

.. code-block:: default

    ModK.invert_polarity([False, False, True, True])
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_004.png
    :alt: A, B, C, D
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x0000019E8FFD17C8>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E92D91388>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E93097C88>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x0000019E90056E88>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 70-76

Finaly, the modified Kmeans can be used to predict the microstates segmentation using the :meth:`ModK.predict` method:
By default, semgents annoated as bad will no be labeled: this behavior can be changed by changing the `reject_by_annotation` paramerts.
Smoothing can be performed on the output sequence by setting the `factor` parameter > 0 (no smotthing by default factor = 0) while the
`half_window_size` parameter is used to specify the smoothing temporal span.
Finaly, the `rejected_first_last_segments` parameter allows not to assign the first and last segment of each record (or each epoch) as these can be incomplete.
Should have little impact for raw, but can be important when working with epochs.

.. GENERATED FROM PYTHON SOURCE LINES 76-78

.. code-block:: default


    segmentation = ModK.predict(raw, reject_by_annotation=True, factor=10, half_window_size=30, rejected_first_last_segments=True)
    segmentation.plot()


.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_modK_005.png
    :alt: Segmentation
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Segmenting data with factor 10 and effective smoothing window size : 0.38125 (ms)
    Rejecting first and last segment

    (<Figure size 1000x400 with 2 Axes>, [<matplotlib.lines.Line2D object at 0x0000019E93C119C8>])




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  15.931 seconds)


.. _sphx_glr_download_auto_tutorials_clustering_plot_modK.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_modK.py <plot_modK.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_modK.ipynb <plot_modK.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
