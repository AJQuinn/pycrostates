
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials\clustering\plot_extract_gfp_peaks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_clustering_plot_extract_gfp_peaks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_clustering_plot_extract_gfp_peaks.py:


Global field power peaks extraction
===================================

This example demonstrates how to extract global field power (gfp) peaks.

.. GENERATED FROM PYTHON SOURCE LINES 7-26

.. code-block:: default


    from mne.io import read_raw_edf
    from mne.datasets import eegbci
    from mne.channels import make_standard_montage
    from pycrostates.clustering import ModKMeans

    subject = 1
    runs = [1]

    raw_fnames = eegbci.load_data(subject, runs, update_path=True)[0]
    raw = read_raw_edf(raw_fnames, preload=True)
    eegbci.standardize(raw)  # set channel names

    raw.rename_channels(lambda x: x.strip('.'))
    montage = make_standard_montage('standard_1005')
    raw.set_montage(montage)

    raw.pick('eeg')
    raw.set_eeg_reference('average')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Extracting EDF parameters from C:\Users\Victor\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R01.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    EEG channel type selected for re-referencing
    Applying average reference.
    Applying a custom EEG reference.

    <RawEDF | S001R01.edf, 64 x 9760 (61.0 s), ~4.9 MB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 27-29

Gfp peaks extraction can be done in two ways: the first one using the :func:`~pycrostates.preprocessing.extract_gfp_peaks`.
Note that this function also works for :class:`mne.epochs.Epochs` but will alwas return a :class:`mne.io.Raw` obejct.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default

    from pycrostates.preprocessing import extract_gfp_peaks
    gfp_peaks = extract_gfp_peaks(raw, min_peak_distance=3)
    gfp_peaks




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    1886 gfp peaks extracted out of 9760 samples(19.32% of the original data)

    <RawArray | 64 x 1886 (11.8 s), ~1.0 MB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 33-35

then fit the gfp peaks to the modified Kmeans algorithm. Make sure not to change the default parameter min_peak_distance=0
to avoid performing GFP extraction on your already extracted gfp peaks.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default

    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters, random_state=42)
    ModK.fit(gfp_peaks, n_jobs=5, min_peak_distance=0)
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_extract_gfp_peaks_001.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                                     |  : 0/100 [00:00<?,       ?it/s]      5%|########8                                                                                                                                                                        |  : 5/100 [00:02<00:53,    1.78it/s]     10%|#################6                                                                                                                                                              |  : 10/100 [00:03<00:48,    1.87it/s]     15%|##########################4                                                                                                                                                     |  : 15/100 [00:03<00:43,    1.96it/s]     20%|###################################2                                                                                                                                            |  : 20/100 [00:03<00:38,    2.05it/s]     25%|############################################                                                                                                                                    |  : 25/100 [00:03<00:34,    2.16it/s]     35%|#############################################################6                                                                                                                  |  : 35/100 [00:03<00:28,    2.26it/s]     45%|###############################################################################2                                                                                                |  : 45/100 [00:03<00:23,    2.38it/s]     55%|################################################################################################8                                                                               |  : 55/100 [00:04<00:18,    2.50it/s]     65%|##################################################################################################################4                                                             |  : 65/100 [00:04<00:13,    2.62it/s]     75%|####################################################################################################################################                                            |  : 75/100 [00:04<00:09,    2.75it/s]     85%|#####################################################################################################################################################6                          |  : 85/100 [00:04<00:05,    2.89it/s]    100%|###############################################################################################################################################################################|  : 100/100 [00:04<00:00,   21.09it/s]
    Selecting run with highest GEV = 0.6958127753558345%.

    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x000001DB9289BC88>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DB938DBB70>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DB93911C88>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DB93945FD0>],
          dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 41-42

or directly extract gfp peaks during the fitting using the min_peak_distance parameter of :meth:`ModK.fit`.

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: default

    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters, random_state=42)
    ModK.fit(raw, min_peak_distance=3, n_jobs=5)
    ModK.plot()


.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_extract_gfp_peaks_002.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data by selecting Gfppeaks with minimum distance of 0.48ms(3 samples)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                                     |  : 0/100 [00:00<?,       ?it/s]      1%|#7                                                                                                                                                                               |  : 1/100 [00:00<00:16,    6.13it/s]      5%|########8                                                                                                                                                                        |  : 5/100 [00:03<00:18,    5.19it/s]     10%|#################6                                                                                                                                                              |  : 10/100 [00:03<00:16,    5.42it/s]     15%|##########################4                                                                                                                                                     |  : 15/100 [00:03<00:15,    5.63it/s]     20%|###################################2                                                                                                                                            |  : 20/100 [00:03<00:13,    5.84it/s]     25%|############################################                                                                                                                                    |  : 25/100 [00:03<00:12,    6.10it/s]     30%|####################################################8                                                                                                                           |  : 30/100 [00:04<00:11,    6.35it/s]     40%|######################################################################4                                                                                                         |  : 40/100 [00:04<00:09,    6.62it/s]     50%|########################################################################################                                                                                        |  : 50/100 [00:04<00:07,    6.90it/s]     60%|#########################################################################################################6                                                                      |  : 60/100 [00:04<00:05,    7.19it/s]     70%|###########################################################################################################################2                                                    |  : 70/100 [00:05<00:04,    7.49it/s]     80%|############################################################################################################################################8                                   |  : 80/100 [00:05<00:02,    7.80it/s]     90%|##############################################################################################################################################################4                 |  : 90/100 [00:05<00:01,    8.13it/s]    100%|###############################################################################################################################################################################|  : 100/100 [00:06<00:00,    8.46it/s]    100%|###############################################################################################################################################################################|  : 100/100 [00:06<00:00,   16.60it/s]
    Selecting run with highest GEV = 0.6958127753558344%.

    (<Figure size 640x480 with 4 Axes>, array([<matplotlib.axes._subplots.AxesSubplot object at 0x000001DB93BDAE48>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DB93C19240>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DB93C4C358>,
           <matplotlib.axes._subplots.AxesSubplot object at 0x000001DB93C7C6D8>],
          dtype=object))




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  12.433 seconds)


.. _sphx_glr_download_auto_tutorials_clustering_plot_extract_gfp_peaks.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_extract_gfp_peaks.py <plot_extract_gfp_peaks.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_extract_gfp_peaks.ipynb <plot_extract_gfp_peaks.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
