
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials\clustering\plot_extract_gfp_peaks.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_clustering_plot_extract_gfp_peaks.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_clustering_plot_extract_gfp_peaks.py:


Global field power peaks extraction
===================================

This example demonstrates how to extract global field power (gfp) peaks.

.. GENERATED FROM PYTHON SOURCE LINES 7-26

.. code-block:: default


    from mne.io import read_raw_edf
    from mne.datasets import eegbci
    from mne.channels import make_standard_montage
    from pycrostates.clustering import ModKMeans

    subject = 1
    runs = [1]

    raw_fnames = eegbci.load_data(subject, runs, update_path=True)[0]
    raw = read_raw_edf(raw_fnames, preload=True)
    eegbci.standardize(raw)  # set channel names

    raw.rename_channels(lambda x: x.strip('.'))
    montage = make_standard_montage('standard_1005')
    raw.set_montage(montage)

    raw.pick('eeg')
    raw.set_eeg_reference('average')




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Extracting EDF parameters from C:\Users\ferat\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R01.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    EEG channel type selected for re-referencing
    Applying average reference.
    Applying a custom EEG reference.


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">


    <table class="table table-hover">
        <tr>
            <th>Measurement date</th>
            <td>August 12, 2009  16:15:00 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
    <td>Unknown</td>
        </tr>
            <th>Participant</th>
    <td>Unknown</td>
        </tr>
        <tr>
            <th>Digitized points</th>
            <td>67 points</td>
        </tr>
        <tr>
            <th>Good channels</th>
            <td>0 magnetometer, 0 gradiometer,
                and 64 EEG channels</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td></td>
        
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>Not available</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
        <tr>
            <th>Sampling frequency</th>
            <td>160.00 Hz</td>
        </tr>
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
         <tr>
            <th>Lowpass</th>
            <td>80.00 Hz</td>
        </tr>

        <tr>
            <th>Filenames</th>
            <td>S001R01.edf</td>
        </tr>
        <tr>
            <th>Duration</th>
            <td>00:01:00 (HH:MM:SS)</td>
        </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 27-29

Gfp peaks extraction can be done in two ways: the first one using the :func:`~pycrostates.preprocessing.extract_gfp_peaks`.
Note that this function also works for :class:`mne.epochs.Epochs` but will alwas return a :class:`mne.io.Raw` obejct.

.. GENERATED FROM PYTHON SOURCE LINES 29-32

.. code-block:: default

    from pycrostates.preprocessing import extract_gfp_peaks
    gfp_peaks = extract_gfp_peaks(raw, min_peak_distance=3)
    gfp_peaks




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    1886 gfp peaks extracted out of 9760 samples(19.32% of the original data)

    <RawArray | 64 x 1886 (11.8 s), ~1.0 MB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 33-35

then fit the gfp peaks to the modified Kmeans algorithm. Make sure not to change the default parameter min_peak_distance=0
to avoid performing GFP extraction on your already extracted gfp peaks.

.. GENERATED FROM PYTHON SOURCE LINES 35-40

.. code-block:: default

    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters, random_state=42)
    ModK.fit(gfp_peaks, n_jobs=5, min_peak_distance=0)
    ModK.plot()




.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_extract_gfp_peaks_001.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]      5%|########1                                                                                                                                                          |  : 5/100 [00:03<01:00,    1.56it/s]     10%|################2                                                                                                                                                 |  : 10/100 [00:03<00:54,    1.64it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:03<00:49,    1.72it/s]     20%|################################4                                                                                                                                 |  : 20/100 [00:03<00:44,    1.81it/s]     25%|########################################5                                                                                                                         |  : 25/100 [00:03<00:39,    1.90it/s]     30%|################################################6                                                                                                                 |  : 30/100 [00:03<00:35,    2.00it/s]     40%|################################################################8                                                                                                 |  : 40/100 [00:04<00:28,    2.10it/s]     60%|#################################################################################################2                                                                |  : 60/100 [00:04<00:18,    2.20it/s]     80%|#################################################################################################################################6                                |  : 80/100 [00:04<00:08,    2.31it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:05<00:00,    2.43it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:05<00:00,   18.93it/s]
    Selecting run with highest GEV = 0.6958127753558345%.

    (<Figure size 640x480 with 4 Axes>, array([<AxesSubplot:title={'center':'1'}>,
           <AxesSubplot:title={'center':'2'}>,
           <AxesSubplot:title={'center':'3'}>,
           <AxesSubplot:title={'center':'4'}>], dtype=object))



.. GENERATED FROM PYTHON SOURCE LINES 41-42

or directly extract gfp peaks during the fitting using the min_peak_distance parameter of :meth:`ModK.fit`.

.. GENERATED FROM PYTHON SOURCE LINES 42-45

.. code-block:: default

    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters, random_state=42)
    ModK.fit(raw, min_peak_distance=3, n_jobs=5)
    ModK.plot()


.. image:: /auto_tutorials/clustering/images/sphx_glr_plot_extract_gfp_peaks_002.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data by selecting Gfppeaks with minimum distance of 0.48ms(3 samples)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]      5%|########1                                                                                                                                                          |  : 5/100 [00:00<00:01,   56.96it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:00<00:01,   56.65it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:01,   57.51it/s]     55%|#########################################################################################1                                                                        |  : 55/100 [00:01<00:00,   55.54it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:01<00:00,   55.05it/s]     95%|#########################################################################################################################################################9        |  : 95/100 [00:01<00:00,   54.61it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:01<00:00,   50.72it/s]
    Selecting run with highest GEV = 0.6958127753558344%.

    (<Figure size 640x480 with 4 Axes>, array([<AxesSubplot:title={'center':'1'}>,
           <AxesSubplot:title={'center':'2'}>,
           <AxesSubplot:title={'center':'3'}>,
           <AxesSubplot:title={'center':'4'}>], dtype=object))




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  9.107 seconds)


.. _sphx_glr_download_auto_tutorials_clustering_plot_extract_gfp_peaks.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_extract_gfp_peaks.py <plot_extract_gfp_peaks.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_extract_gfp_peaks.ipynb <plot_extract_gfp_peaks.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
