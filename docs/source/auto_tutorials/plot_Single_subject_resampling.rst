
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_tutorials\plot_Single_subject_resampling.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_tutorials_plot_Single_subject_resampling.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_tutorials_plot_Single_subject_resampling.py:


Single Subject Segmentation with resampling
===========================================

This example demonstrates how to segment a single subject recording into microstates sequence.

.. GENERATED FROM PYTHON SOURCE LINES 7-28

.. code-block:: default


    from mne.io import read_raw_edf
    from mne.datasets import eegbci
    from mne.channels import make_standard_montage

    from pycrostates.clustering import ModKMeans

    subject = 1
    runs = [1]

    raw_fnames = eegbci.load_data(subject, runs, update_path=True)[0]
    raw = read_raw_edf(raw_fnames, preload=True)
    eegbci.standardize(raw)  # set channel names

    raw.rename_channels(lambda x: x.strip('.'))
    montage = make_standard_montage('standard_1005')
    raw.set_montage(montage)

    raw.pick('eeg')
    raw.set_eeg_reference('average')





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Extracting EDF parameters from C:\Users\ferat\mne_data\MNE-eegbci-data\files\eegmmidb\1.0.0\S001\S001R01.edf...
    EDF file detected
    Setting channel info structure...
    Creating raw.info structure...
    Reading 0 ... 9759  =      0.000 ...    60.994 secs...
    EEG channel type selected for re-referencing
    Applying average reference.
    Applying a custom EEG reference.


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">


    <table class="table table-hover">
        <tr>
            <th>Measurement date</th>
            <td>August 12, 2009  16:15:00 GMT</td>
        
        </tr>
        <tr>
            <th>Experimenter</th>
    <td>Unknown</td>
        </tr>
            <th>Participant</th>
    <td>Unknown</td>
        </tr>
        <tr>
            <th>Digitized points</th>
            <td>67 points</td>
        </tr>
        <tr>
            <th>Good channels</th>
            <td>0 magnetometer, 0 gradiometer,
                and 64 EEG channels</td>
        </tr>
        <tr>
            <th>Bad channels</th>
            <td></td>
        
        </tr>
        <tr>
            <th>EOG channels</th>
            <td>Not available</td>
        </tr>
        <tr>
            <th>ECG channels</th>
            <td>Not available</td>
        <tr>
            <th>Sampling frequency</th>
            <td>160.00 Hz</td>
        </tr>
        <tr>
            <th>Highpass</th>
            <td>0.00 Hz</td>
        </tr>
         <tr>
            <th>Lowpass</th>
            <td>80.00 Hz</td>
        </tr>

        <tr>
            <th>Filenames</th>
            <td>S001R01.edf</td>
        </tr>
        <tr>
            <th>Duration</th>
            <td>00:01:00 (HH:MM:SS)</td>
        </tr>
    </table>

    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 29-30

This step is optional. We can extract GfP peaks before doing resampling.

.. GENERATED FROM PYTHON SOURCE LINES 30-34

.. code-block:: default

    from pycrostates.preprocessing import extract_gfp_peaks
    raw = extract_gfp_peaks(raw, min_peak_distance=3)
    raw





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    1886 gfp peaks extracted out of 9760 samples(19.32% of the original data)

    <RawArray | 64 x 1886 (11.8 s), ~1.0 MB, data loaded>



.. GENERATED FROM PYTHON SOURCE LINES 35-36

Resample raw instance into 10 epochs of 150 samples

.. GENERATED FROM PYTHON SOURCE LINES 36-38

.. code-block:: default

    from pycrostates.preprocessing import resample
    resamples = resample(raw, n_epochs=10, n_samples=150, random_state=40)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Resampling instance into 10 epochs of 150 covering 79.533404% of the data




.. GENERATED FROM PYTHON SOURCE LINES 39-40

Compute Kmeans clustering on each sample independently

.. GENERATED FROM PYTHON SOURCE LINES 40-49

.. code-block:: default

    n_clusters = 4
    ModK = ModKMeans(n_clusters=n_clusters, random_state=42)

    resample_centers = list()
    for sample in resamples:
        ModK.fit(sample, n_jobs=5)
        cluster_centers = ModK.get_cluster_centers_as_raw()
        resample_centers.append(cluster_centers)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:00<00:00,  624.99it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00,  629.91it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00,  640.76it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1075.25it/s]
    Selecting run with highest GEV = 0.5701889117803374%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:00<00:00,  767.45it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00,  781.02it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00,  795.96it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1458.89it/s]
    Selecting run with highest GEV = 0.5708661103709326%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:00<00:00,  833.22it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00,  840.23it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00,  848.79it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1315.78it/s]
    Selecting run with highest GEV = 0.569301995794834%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:00<00:00,  750.00it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00,  756.62it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00,  766.67it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1219.51it/s]
    Selecting run with highest GEV = 0.5437923533317937%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:00<00:00,  882.21it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00,  893.38it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00,  905.28it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1492.49it/s]
    Selecting run with highest GEV = 0.5995407388399374%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00, 1206.73it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00, 1212.48it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1694.75it/s]
    Selecting run with highest GEV = 0.5591831516326542%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00, 1206.82it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00, 1201.64it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1538.39it/s]
    Selecting run with highest GEV = 0.5859598249378356%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00, 1249.85it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00, 1238.25it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1515.07it/s]
    Selecting run with highest GEV = 0.6125000828482083%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00, 1094.74it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00, 1100.02it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1515.69it/s]
    Selecting run with highest GEV = 0.5913763205039173%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.
    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     15%|########################3                                                                                                                                         |  : 15/100 [00:00<00:00,  868.53it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00,  880.05it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00,  895.26it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 1531.98it/s]
    Selecting run with highest GEV = 0.6025925895095914%.
    Creating RawArray with float64 data, n_channels=64, n_times=4
        Range : 0 ... 3 =      0.000 ...     0.019 secs
    Ready.




.. GENERATED FROM PYTHON SOURCE LINES 50-51

Then compute Kmeans clustering on the concatenated results

.. GENERATED FROM PYTHON SOURCE LINES 51-54

.. code-block:: default

    from mne import concatenate_raws
    concat_raw = concatenate_raws(resample_centers)
    ModK.fit(concat_raw, n_jobs=5)
    ModK.plot()


.. image:: /auto_tutorials/images/sphx_glr_plot_Single_subject_resampling_001.png
    :alt: 1, 2, 3, 4
    :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    Fitting modified Kmeans with Raw data (no gfp peaks extraction)
    Running Kmeans for 4 clusters centers with 100 random initialisations.
      0%|                                                                                                                                                                       |  : 0/100 [00:00<?,       ?it/s]     35%|########################################################7                                                                                                         |  : 35/100 [00:00<00:00, 1523.95it/s]     75%|#########################################################################################################################5                                        |  : 75/100 [00:00<00:00, 1542.31it/s]    100%|#################################################################################################################################################################|  : 100/100 [00:00<00:00, 2327.41it/s]
    Selecting run with highest GEV = 0.9084760384571737%.

    (<Figure size 640x480 with 4 Axes>, array([<AxesSubplot:title={'center':'1'}>,
           <AxesSubplot:title={'center':'2'}>,
           <AxesSubplot:title={'center':'3'}>,
           <AxesSubplot:title={'center':'4'}>], dtype=object))




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.726 seconds)


.. _sphx_glr_download_auto_tutorials_plot_Single_subject_resampling.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_Single_subject_resampling.py <plot_Single_subject_resampling.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_Single_subject_resampling.ipynb <plot_Single_subject_resampling.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
